#!/usr/bin/env python3
import csv, json, os, requests, sys, yaml
from io import TextIOWrapper
from os.path import join, dirname, abspath, exists
from os import mkdir, makedirs
from urllib.request import urlopen
from urllib.error import HTTPError
from utils.io import write_yaml

MUBENCH_ROOT_PATH = join(dirname(abspath(__file__)), os.pardir)
DATA_PATH = join(MUBENCH_ROOT_PATH, 'data')
SOURCE_URL = "http://fsl.cs.illinois.edu/spec-eval/bugreports.csv"
LOCAL_PULL_REQUESTS = join(MUBENCH_ROOT_PATH, 'owolabi-pull-requests')

def read_csv(url):
    stream = urlopen(url)
    reader = csv.reader(TextIOWrapper(stream))
    return list(reader)

def get_rows_with_accepted_pull_requests_from(source):
    accepted_rows = []

    for row in source:
        _, _, _, _, status = row

        if status in ['Accepted']:
            accepted_rows.append(row)
        elif status in ['Rejected', 'Pending ', 'Already fixed']:
            pass
        else:
            raise ValueError("Unknown status: {}".format(status))

    return accepted_rows
        

def get_pull_request(url, user, token):
    url = __to_api_pull_request_url(pull_request_url)

    local_pull_request = __get_local_pull_request_path(url)
    if exists(local_pull_request):
        with open(local_pull_request) as file_:
            pull_request = json.load(file_)
        return pull_request
    else:
        if not (user and token):
            raise HTTPError("")

        response = requests.get(url,
                                auth=requests.auth.HTTPBasicAuth(
                                    user, 
                                    token))
        pull_request = json.loads(response.text)

        save_locally(pull_request)
        return pull_request


def __to_api_pull_request_url(url):
    # urls in the dataset look like this:
    # https://github.com/cbeust/testng/pull/830
    # to use the github API, we need this:
    # https://api.github.com/repos/cbeust/testng/pulls/830

    path = url[19:]
    user, project, _, pull_request_id = path.split('/')

    api_url = "https://api.github.com/repos/{}/{}/pulls/{}".format(user, project, pull_request_id)
    return api_url


def __get_local_pull_request_path(url):
    url_path = url.split("https://api.github.com/repos/", 1)[1]
    return join(LOCAL_PULL_REQUESTS, url_path)


def save_locally(pull_request):
    file_path = __get_local_pull_request_path(pull_request["url"])
    makedirs(dirname(file_path), exist_ok=True)

    with open(file_path, 'w+') as file_:
        json.dump(pull_request, file_)


def create_project(data_path, repository):
    project_dir = join(data_path, repository["name"].lower())
    makedirs(project_dir, exist_ok=True)
    
    content = {
            "name": repository["name"], 
            "repository": {"type": "git", "url": repository["html_url"]},
            "url": repository["homepage"] or repository["html_url"]
            }

    project_yml_path = join(project_dir, "project.yml")
    write_yaml(content, project_yml_path)


source = read_csv(SOURCE_URL)
accepted = get_rows_with_accepted_pull_requests_from(source)

if len(sys.argv) == 3:
    _, user, token = sys.argv
else:
    user, token = (None, None)
    print("No user/token given; continuing with local sources only.")

for violation in accepted:
    row_number, specification, violation_id, pull_request_url, status = violation

    if not pull_request_url.startswith("https://github.com/"):
        print("Unknown repository type of {}".format(pull_request_url))
        continue

    try:
        pull_request = get_pull_request(pull_request_url, user, token)
    except HTTPError:
        print("No pull request information available for {}".format(violation_id))
        continue

    repository = pull_request["base"]["repo"]
    create_project(DATA_PATH, repository)
